/*
 * Copyright (c) 2015, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== uartecho.c ========
 */

/* XDCtools Header files */
#include <xdc/std.h>
#include <xdc/runtime/System.h>

/* BIOS Header files */
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Task.h>

/* TI-RTOS Header files */
#include <ti/drivers/GPIO.h>
#include <ti/drivers/UART.h>

/* Example/Board Header files */
#include "Board.h"

#include <stdint.h>

#include <stdint.h>
#include <stdbool.h>

#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/debug.h"
#include "driverlib/fpu.h"
#include "driverlib/gpio.h"
#include "driverlib/interrupt.h"
#include "driverlib/pin_map.h"
#include "driverlib/rom.h"
#include "driverlib/rom_map.h"
#include "driverlib/sysctl.h"
#include "driverlib/timer.h"
#include "driverlib/uart.h"
#include "utils/uartstdio.h"
#include "grlib/grlib.h"
#include "grlib/widget.h"
#include "grlib/canvas.h"
#include "drivers/Kentec320x240x16_ssd2119_spi.h"
#include "drivers/touch.h"

#define TASKSTACKSIZE     768
#define BUFFERSIZE        10
int enterCount = 0;
int Up = 0;
int Left = 0;
int Right = 0;
int Down = 0;
char charBuffer[BUFFERSIZE];
int buffPos = 0;
int xpos = 2;
int ypos = 2;
int EnterBuffer = 0;
int ymax=0;
int xmax=0;
int ymin=2;
int xmin=2;
int xlast = 0;
int ylast = 0;
int passed =0;
tContext sContext;
tRectangle sRect;
Task_Struct task0Struct;
Char task0Stack[TASKSTACKSIZE];
uint32_t g_ui32SysClock;
char input;
/*
 *  ======== echoFxn ========
 *  Task for this function is created statically. See the project's .cfg file.
 */
Void TaskDraw(){
    EnterBuffer = 0;
    System_printf("main Task\n");
    System_flush();
    if (xpos < xmin){
        xpos = xmin;
    } else if (xpos > xmax){
        xpos = xmax;
    }
    if (ypos < ymin){
        ypos = ymin;
    } else if (ypos > ymax){
        ypos = ymax;
    }
    GrContextForegroundSet(&sContext, ClrBlack);
    GrCircleDraw(&sContext,xlast,ylast,2);
    GrCircleFill(&sContext,xlast,ylast,2);
    xlast = xpos;
    ylast = ypos;
    GrContextForegroundSet(&sContext, ClrDarkGreen);
    GrCircleDraw(&sContext,xpos,ypos,2);
    GrCircleFill(&sContext,xpos,ypos,2);
}
Void SwiAdd(){
    System_printf("System int\n");
    System_flush();
    if (EnterBuffer == 2){
        TaskDraw();
    }else{
        int j= 0;
        for (j = 0; j < BUFFERSIZE; j++){
            if (charBuffer[j] == 'w'){
                ypos--;
            }else if (charBuffer[j] == 'a'){
                xpos--;
            }else if (charBuffer[j] == 's'){
                ypos++;
            }else if (charBuffer[j] == 'd'){
                xpos++;
            }
        }
        strncpy(charBuffer,"",BUFFERSIZE);
    }
}
Void HwiUart(){
    if (passed != 0){
    System_printf("hardware int\n");
    System_flush();
    if (input == '\r'){
        EnterBuffer++;
        SwiAdd();
    } else{
        EnterBuffer = 0;
        charBuffer[buffPos] = input;
        buffPos = (buffPos+1)%BUFFERSIZE;
    }
    }

}


Void echoFxn(UArg arg0, UArg arg1)
{

    UART_Handle uart;
    UART_Params uartParams;
    const char echoPrompt[] = "\fEchoing characters:\r\n";

    /* Create a UART with data processing off. */
    UART_Params_init(&uartParams);
    uartParams.writeDataMode = UART_DATA_BINARY;
    uartParams.readDataMode = UART_DATA_BINARY;
    uartParams.readReturnMode = UART_RETURN_FULL;
    uartParams.readEcho = UART_ECHO_OFF;
    uartParams.readMode=UART_MODE_CALLBACK;
    uartParams.writeMode=UART_MODE_CALLBACK;
    uartParams.baudRate = 9600;
    uart = UART_open(Board_UART0, &uartParams);

    if (uart == NULL) {
        System_abort("Error opening the UART");
    }

    UART_write(uart, echoPrompt, sizeof(echoPrompt));

    /* Loop forever echoing */

    while (1) {
        passed = UART_read(uart, &input, 1);
        UART_write(uart, &input, 1);
        HwiUart();
        System_printf("AHHHHHHHH");
        System_flush();

    }
}

/*
 *  ======== main ========
 */
int main(void){
    /* Call board init functions */
    Board_initGeneral();
    Board_initGPIO();
    Board_initUART();

    /* Construct BIOS objects */
    Task_Params taskParams;

    Task_Params_init(&taskParams);
    taskParams.stackSize = TASKSTACKSIZE;
    taskParams.stack = &task0Stack;
    taskParams.instance->name = "echo";
    Task_construct(&task0Struct, (Task_FuncPtr)echoFxn, &taskParams, NULL);

    /* Turn on user LED */

    /* This example has logging and many other debug capabilities enabled */
    System_printf("This example does not attempt to minimize code or data "
                  "footprint\n");
    System_flush();

    System_printf("Starting the UART Echo example\nSystem provider is set to "
                  "SysMin. Halt the target to view any SysMin contents in "
                  "ROV.\n");
    /* SysMin will only print to the console when you call flush or exit */
    System_flush();
    g_ui32SysClock = MAP_SysCtlClockFreqSet((SYSCTL_XTAL_25MHZ | SYSCTL_OSC_MAIN | SYSCTL_USE_PLL | SYSCTL_CFG_VCO_480), 120000000);
    Kentec320x240x16_SSD2119Init(g_ui32SysClock);
    GrContextInit(&sContext, &g_sKentec320x240x16_SSD2119);

    xmax = GrContextDpyWidthGet(&sContext) - 5;
    ymax = GrContextDpyHeightGet(&sContext) - 5;
    GrContextForegroundSet(&sContext, ClrDarkGreen);
    GrCircleDraw(&sContext,xpos,ypos,2);
    GrCircleFill(&sContext,xpos,ypos,2);
    xlast = xpos;
    ylast = ypos;
/*    GrContextFontSet(&sContext, &g_sFontCm20);
    GrContextForegroundSet(&sContext, ClrWhite);
        GrContextFontSet(&sContext, &g_sFontCm20);
        GrContextForegroundSet(&sContext, ClrWhite);
            GrRectFill(&sContext, &sRect);
            GrContextForegroundSet(&sContext, ClrWhite);
            GrRectDraw(&sContext, &sRect);
            GrContextFontSet(&sContext, &g_sFontCm20);*/
    /* Start BIOS */
    BIOS_start();

    return (0);
}
